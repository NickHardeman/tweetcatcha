package com.tweetcatcha.nav {		import flash.display.MovieClip;		import flash.geom.ColorTransform;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;		import flash.text.TextFieldAutoSize;	import flash.text.TextField;		import flash.utils.Timer;		import com.caurina.transitions.*;		import com.tweetcatcha.data.objects.NewsItem;	import com.tweetcatcha.data.Data;	import com.tweetcatcha.data.Constants;	import com.reintroducing.events.CustomEvent;		public class MainNav extends EventDispatcher {		// how long before menu hides again, in millies, a million here, a million there //		private const MENU_PAUSE	:int = 700;				private var _mc				:MovieClip;		private var _sw				:Number;		private var _sh				:Number;		private var _hourBtns		:Vector.<MainHourBtn>;		private var _newsItems		:Vector.<NewsItem>;		private var _headBtns		:Vector.<HourHeadlineBtn>;				private var _timer			:Timer;		private var _overItem		:Boolean = false;						public function setup($newsItems:Array):void {			_newsItems = new Vector.<NewsItem>();			_hourBtns = new Vector.<MainHourBtn>(24, true);			_headBtns = new Vector.<HourHeadlineBtn>();						for (var i:int = 0; i < 24; i++) {				var hb:MainHourBtn = new MainHourBtn();				hb.x = i * 50;				_mc.contentHolda.addChild( hb );				//hb.mouseChildren = false;				_hourBtns[i] = ( hb );				_hourBtns[i].hour = i;				var hour:int = i;				var am:String = "am";				if (hour >= 12 ) {hour -= 12; am = "pm";}				if (hour == 0) hour = 12;				var hourString:String = String(hour);				if (hourString.length < 2) hourString = "0"+hourString;				hourString += " "+am;				hb._txt.autoSize = TextFieldAutoSize.CENTER;				hb._txt.text = hourString;			}			for (i = 0; i < $newsItems.length; i++) {				_newsItems.push( $newsItems[i] as NewsItem );				var headBtn:HourHeadlineBtn = new HourHeadlineBtn();				headBtn.ID = _newsItems[i].ID;				headBtn._id = i;				headBtn._txt.autoSize = TextFieldAutoSize.LEFT;				headBtn._txt.text = _newsItems[i].headline;				headBtn.tarHeight = 20;				headBtn.tarWidth = headBtn._txt.x * 2 + headBtn._txt.width;				_hourBtns[_newsItems[i].hour].itemsHolda_mc.addChild( headBtn );				headBtn.closedHeight = 10;				headBtn.tarY = _hourBtns[_newsItems[i].hour].itemsHolda_mc.numChildren * (headBtn.closedHeight + 2) * -1 - 3;				headBtn.y = headBtn.tarY;								var c:ColorTransform = new ColorTransform();				c.color = Constants.getColorForSection( _newsItems[i].section );				headBtn.rec.transform.colorTransform = c;								headBtn.addEventListener(MouseEvent.ROLL_OVER, _onHeadlineBtnOver, false, 0, true);				headBtn.addEventListener(MouseEvent.ROLL_OUT, _onHeadlineBtnOut, false, 0, true);				headBtn.addEventListener(MouseEvent.CLICK, _onHeadlineBtnClick, false, 0, true);				headBtn.mouseChildren = false;				headBtn.buttonMode = true;								headBtn.rec.width = headBtn.closedWidth;				headBtn.rec.height = headBtn.closedHeight;				headBtn.tMask.width = headBtn.tMask.height = 0;								_headBtns.push(headBtn);								//trace("MainNav :: setup : news item updated time"+_newsItems[i].updatedTime);			}		}				public function checkMouse($y:Number):void {			if ($y > _sh - _mc.hit_mc.height) {				animateIn();			}		}				public function disableMenu():void {			_mc.contentHolda.mouseEnabled = false;		}		public function enableMenu():void {			_mc.contentHolda.mouseEnabled = true;		}				public function animateIn():void {			if (_mc.contentHolda.y != 0) {				_shiftItems();				Tweener.addTween(_mc.contentHolda, {y:0, time:.3, transition:"easeOutQuint", onComplete:_onAnimateIn});			}		}		private function _onAnimateIn():void {			resetTimer();			enableMenu();			dispatchEvent( new Event( Constants.ANIMATE_IN_COMPLETE ) );		}				public function animateOut():void {			disableMenu();			_hideItems();			Tweener.addTween(_mc.contentHolda, {y:_mc.hit_mc.height + 2, time:.3, transition:"easeInCubic"});		}				public function onStageResize( $w:Number, $h:Number ):void {			//trace("Width: "+$w);			_sw = $w;			_sh = $h;			_mc.y = _sh - _mc.hit_mc.height;			_mc.hit_mc.width = _sw;			_layoutMenu();		}				private function resetTimer():void {			if (_timer == null) {_timer = new Timer(MENU_PAUSE, 1);}			else {_timer.reset(); _timer.removeEventListener(TimerEvent.TIMER_COMPLETE, _onHideMenu);}			_timer.addEventListener(TimerEvent.TIMER_COMPLETE, _onHideMenu, false, 0, true);			_timer.start();		}				private function _onHideMenu($e:TimerEvent = null):void {			if (!_overItem) {				disableMenu();				animateOut();			}		}				private function _layoutMenu():void {			if (_hourBtns != null) {				var btnWidth:Number = _sw / 24;				for (var i:int = 0; i < 24; i++) {					_hourBtns[i].rec.width = btnWidth - 2;					_hourBtns[i].x = btnWidth * i;					_hourBtns[i]._txt.x = (_hourBtns[i].rec.width * .5) - (_hourBtns[i]._txt.textWidth * .5);					//trace("MainNav :: setup : hb._txt.textWidth = "+_hourBtns[i]._txt.textWidth);				}				for (i = 0; i < _headBtns.length; i++) {					_headBtns[i].rec.width = btnWidth - 2;					_headBtns[i].closedWidth = _headBtns[i].rec.width;				}			}		}				private function _onHeadlineBtnClick($e:MouseEvent):void {			dispatchEvent( new CustomEvent(Constants.HEADLINE_ID_SELECTED, {ID:$e.currentTarget.ID}) );		}				private function _onHeadlineBtnOver($e:MouseEvent = null) {			resetTimer();			_overItem = true;			var headBtn:HourHeadlineBtn = HourHeadlineBtn($e.currentTarget);			Tweener.addTween(headBtn.rec, {width:headBtn.tarWidth, height:headBtn.tarHeight, time:.3, transition:"easeOutQuint"});			Tweener.addTween(headBtn.tMask, {width:headBtn.tarWidth, height:headBtn.tarHeight, time:.4, transition:"easeOutQuint"});			_shiftItems(headBtn);		}		private function _onHeadlineBtnOut($e:MouseEvent = null) {			resetTimer();			_overItem = false;			var headBtn:HourHeadlineBtn = HourHeadlineBtn($e.currentTarget);			Tweener.removeTweens( $e.currentTarget );			//headBtn.rec.height = 			Tweener.addTween(headBtn.rec, {width:headBtn.closedWidth, height:headBtn.closedHeight, time:.3, transition:"easeOutQuint"});			//headBtn.rec.height = headBtn.closedHeight;			Tweener.addTween(headBtn.tMask, {width:0, height:0, time:.1, transition:"easeOutQuint"});			//headBtn.tMask.width = headBtn.tMask.height = 0;			_shiftItems( null );		}				private function _shiftItems($t:HourHeadlineBtn = null):void {			if ($t != null) _mc.contentHolda.swapChildren(_mc.contentHolda.getChildAt(_mc.contentHolda.numChildren - 1), _hourBtns[_newsItems[$t._id].hour] );			for (var i:int = 0; i < _headBtns.length; i++) {								var tarY:Number = _headBtns[i].tarY;								if ($t != null) {					if (_headBtns[i].parent == $t.parent) {						if (_headBtns[i].tarY <= $t.tarY) {							tarY = _headBtns[i].tarY - (_headBtns[i].tarHeight * .5);						}					}				}								if (_headBtns[i].y != tarY) {					Tweener.addTween(_headBtns[i], {y:tarY, time:.3, transition:"easeOutCubic"});				}							}		}				private function _hideItems():void {			for (var i:int = 0; i < _headBtns.length; i++) {				if (_headBtns[i].y != 0) {					Tweener.addTween(_headBtns[i], {y:0, time:.2, transition:"easeInCubic"});				}			}		}								public function set mc($mc:MovieClip):void {			_mc = $mc;		}					}	}