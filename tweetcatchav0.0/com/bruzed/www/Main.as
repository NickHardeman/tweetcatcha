package com.bruzed.www {		import flash.display.MovieClip;	import flash.text.TextField;	import flash.events.*;		import com.bruzed.www.times.*;	import com.bruzed.www.twitter.*		public class Main extends MovieClip {		//variable for the newswire xml		private var newswire:Newswire;		//array to store newswire headlines		private var _headlines:Array = new Array();		private var _headlines2:Array = new Array();		//new twitter search object		private var twitterSearch:TwitterSearch;		private var twitterSearch2:TwitterSearch;		//display the headlines		private var _headlineText:TextField;		private var _headlineText2:TextField;		//display the number of results		private var _numResultsText:TextField;		private var _numResultsText2:TextField;		//incrementor for number of results		private var _numResultIncrementor:uint;		private var _numResultIncrementor2:uint;		//api keys		private const API_KEY:String = "cc79503c84c6fc36e8e6fd848827a201:17:59190453";		private const ARTICLE_SEARCH_API_KEY:String = "7b448b63fd1c480dad63218614a6153d:16:59190453";		//variables for article search object		private var articleSearch:ArticleSearch;				//constructor		public function Main():void {			//newswire items			newswire = new Newswire(API_KEY);			newswire.addEventListener(Newswire.LOADED, _constructQueries, false, 0, true);			newswire.load();			//article search items			articleSearch = new ArticleSearch(ARTICLE_SEARCH_API_KEY);			articleSearch.addEventListener(ArticleSearch.LOADED, _constructArticleQueries, false, 0, true);			articleSearch.load();		}				//construct the query		public function _constructQueries($e:Event):void {			_headlines = newswire.getHeadlines;			newswire.removeEventListener(Newswire.LOADED, _constructQueries);			//trace(_headlines);			_doTwitterSearch();		}				//function to do twitter search and display the headline		public function _doTwitterSearch():void {			for (var i:uint = 0; i < _headlines.length; i++) {				twitterSearch = new TwitterSearch(_headlines[i]);				twitterSearch.addEventListener(TwitterSearch.SEARCH_COMPLETE, checkTwitterStatus);				//display the headlines				_displayHeadlines(_headlines[i], i);			}		}				//get the results from twitter		public function checkTwitterStatus(e:Event):void {			//display the results			_displayNumResults(e.target.getNumResults);			e.target.removeEventListener(TwitterSearch.SEARCH_COMPLETE, checkTwitterStatus);		}				//display headlines		public function _displayHeadlines(_headline:String, _ypos:uint):void {			_headlineText = new TextField();			_headlineText.x = 30;			_headlineText.y = _ypos * 20;			_headlineText.width = 400;			_headlineText.height = 20;			_headlineText.textColor = 0xFFFFFF;			_headlineText.text = _headline;			addChild(_headlineText);		}				//display number of tweets found for each headline		public function _displayNumResults(_numResults:Number):void {			//trace("_numResults = " + _numResults);			_numResultsText = new TextField();			_numResultsText.x = 10;			_numResultsText.y = _numResultIncrementor * 20;			_numResultsText.width = 100;			_numResultsText.height = 20;			_numResultsText.textColor = 0xFF0000;			_numResultsText.text = String(_numResults);			addChild(_numResultsText);			_numResultIncrementor++;		}				//article search stuff		//construct the query		public function _constructArticleQueries($e:Event):void {			_headlines2 = articleSearch.getHeadlines;			articleSearch.removeEventListener(ArticleSearch.LOADED, _constructArticleQueries);			trace(_headlines2);			//_doTwitterSearch();		}			}}