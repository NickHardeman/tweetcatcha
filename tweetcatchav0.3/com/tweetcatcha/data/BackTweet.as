/*This class grabs the XML for each headline and passes it on to the Tweets object to parse and get more pages*/package com.tweetcatcha.data{		import flash.events.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.EventDispatcher;		import com.tweetcatcha.data.objects.Tweets;		import com.tweetcatcha.events.TweetIDEvent;		public class BackTweet extends EventDispatcher {				public static const BACKTWEET_LOADED	:String = "tweetsLoaded";				private var url				:String;				//items to hold all the newsitems		private var newsItems:Array = [];				//xml object		private var _xml:XML;				private var idIncrement:int;				private var allTweets:Array = [];				//constructor		public function BackTweet() {		}				//initialize backtweet		public function init(newsItems:Array):void {			//trace("ready to go");			this.newsItems = newsItems;			//trace(newsItems.length);			//get the urls and ID's from these news items			for (var i:uint = 0; i < newsItems.length; i++) {				var url = newsItems[i].url;				//trace(url);				//_searchHeadline(url);				var tweets:Tweets = new Tweets(i, url);				tweets.addEventListener(TweetIDEvent.TWEETID, _onTweetsLoaded);			}		}				//handle the tweet loader event		public function _onTweetsLoaded(event:TweetIDEvent):void {			//trace(event.getID);			allTweets[event.getID] = event.target;			//trace(allTweets);			if (allTweets.length < newsItems.length) {				//nothing			} else {				dispatchEvent(new Event(BACKTWEET_LOADED));			}		}				//get tweets		public function get getTweets():Array {			return allTweets;		}	}	}