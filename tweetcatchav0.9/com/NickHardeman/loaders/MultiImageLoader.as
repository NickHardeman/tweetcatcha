// Created by Nick Hardeman //// NickHardeman.com //// Code based on that by Arthur Debert in BulkLoader, located at http://code.google.com/p/bulk-loader/package com.NickHardeman.loaders {	import com.NickHardeman.loaders.LoadingImageItem;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.utils.getTimer;		public class MultiImageLoader extends EventDispatcher {				private var _items:Array;		private var _itemsTotal:int = 0;		private var _itemsLoaded:int = 0;				// all time is in milli seconds //		private var _timeStarted:int = 0;		private var _timeFinished:int = 0;		private var _timeElapsed:int = 0;		private var _timeTotal:int = 0;				private var _bytesLoaded:Number = 0;		private var _bytesTotal:Number = 1;		// Number from 0 - 1		private var _percent:Number = 0;				private var allStarted:Boolean = false;		private var _started:Boolean = false;				public function MultiImageLoader() {			init();		}				private function init():void {			_items = new Array();		}				public function addLoader(props:Object = null):Boolean {			var _id:String = String(props["id"]);			var _url:String = props["url"];			if (!_url) {				//dispatchEvent(new Error("No url was passed!"));				return false;			}			if (!_id) {				_id = String(_url)+String(getTimer() + Math.random() * 500);			}			if (getItemById(_id)) {trace("There is already a Loading Item with that id, please use another"); return false;}			var LI:LoadingImageItem = new LoadingImageItem(String(_id), _url);			LI.disableCache = props["disableCache"] || false;			LI.addEventListener(Event.COMPLETE, onLICompleteHandler, false, 0, true);			LI.addEventListener(ProgressEvent.PROGRESS, onLIProgressHandler, false, 0, true);			_itemsTotal++;			_items.push(LI);			return true;		}				public function loadEm():Boolean {			if (_items.length < 1) {				return false;			} 			if (!_started) {				_timeStarted = getTimer();			}			_started = true;			loadItems();			return true;		}				public function onLIProgressHandler(e:Event = null):void {			_bytesTotal = _bytesLoaded = 0;			allStarted = true;			var MILE:MultiImageLoaderEvent = new MultiImageLoaderEvent(MultiImageLoaderEvent.PROGRESS);						for each(var LI:LoadingImageItem in _items) {				if (LI is LoadingImageItem) {					if (LI.status == LoadingImageItem.LOADING || LI.status == LoadingImageItem.LOADED) {						_bytesTotal += LI._bytesTotal;						_bytesLoaded += LI._bytesLoaded;					}					if (LI.status == LoadingImageItem.WAITING) {allStarted = false;}				}			}			_percent = _bytesLoaded/_bytesTotal;			//if (!allStarted) {_bytesTotal = Number.POSITIVE_INFINITY}			if (isNaN(_percent)) {_percent = 0;}			_timeElapsed = getTimer() - _timeStarted;0						MILE.updateStats(_bytesLoaded, _bytesTotal, _itemsLoaded, _itemsTotal, _timeElapsed);			dispatchEvent(MILE);		}				private function loadItems():void {			var LI:LoadingImageItem;			for (var i:int = 0; i < _items.length; i++) {				LI = _items[i] as LoadingImageItem;				//trace(LI.status);				if (LI.status == LoadingImageItem.WAITING) {					LI.load();					//trace("this is in the loadItems function "+i);				}			}		}				private function onLICompleteHandler(e:Event):void {			var LI:LoadingImageItem = e.currentTarget as LoadingImageItem;			LI.removeListeners();			removeItemListeners(LI);			_itemsLoaded++;			var LIE:LoadingImageItemEvent = new LoadingImageItemEvent(LoadingImageItemEvent.ITEM_COMPLETE);			LIE.setInfo(LI.id);			dispatchEvent(LIE);			if (areAllLoaded()) {				onAllLoaded();			} 		}				private function areAllLoaded():Boolean {			var all:Boolean = true;			for each(var LI:LoadingImageItem in _items) {				if (LI.status != LoadingImageItem.LOADED) {					all = false;					break;				}			}			return all;		}				private function onAllLoaded():void {			_timeFinished = getTimer();			_timeTotal = _timeFinished - _timeStarted;			//trace("all of the items have been loaded");			var MILCE:MultiImageLoaderEvent = new MultiImageLoaderEvent(MultiImageLoaderEvent.COMPLETE);			MILCE.updateStats(_bytesLoaded, _bytesTotal, _itemsLoaded, _itemsTotal, _timeTotal);			dispatchEvent(MILCE);		}				private function removeItemListeners(LI:LoadingImageItem):void {			if (LI) {				LI.removeEventListener(Event.COMPLETE, onLICompleteHandler);				LI.removeEventListener(ProgressEvent.PROGRESS, onLIProgressHandler);			}		}				public function getTotalItems():int {			return _itemsTotal;		}				public function getItemPercent(id:*):Number {			var LI:LoadingImageItem = getItemById(id);			var p:Number;			if (LI) {				p = LI._percent;			}			return p;		}				public function getItemStatsObj(id:*):Object {			var obj:Object;			var LI:LoadingImageItem = getItemById(id);			if (LI) {				obj = new Object();				obj.id = id;				obj.percent = LI._percent;				obj.bytesLoaded = LI._bytesLoaded;				obj.bytesTotal = LI._bytesTotal;				obj.timeElapsed = LI._timeElapsed;				obj.type = LI._type;			}			return obj;		}				// returns an array of objects that contain the properties of the LoadingImageItem 		// can only be called once all of the images/movies have loaded		public function getAllContent():Array {			var tempArr:Array;			var o:Object;			if (areAllLoaded() && _items.length > 0) {				tempArr = new Array();				for each(var LI:LoadingImageItem in _items) {					o = getItemStatsObj(LI.id);					o.content = getItemContent(LI.id);					tempArr.push(o);				}			}			return tempArr;		}				public function getItemById(id:*):LoadingImageItem {			var LI:LoadingImageItem;			id = String(id);			if (id != "" && id != null) {				for each(var LII:LoadingImageItem in _items) {					if (LII.id === id) {						LI = LII;						break;					}				}			}			return LI;		}				public function getItemContent(id:*):* {			var LI:LoadingImageItem = getItemById(id);			return LI.getContent();		}						// Call this function anytime to destroy this class //		public function destroy():void {			if (_items.length > 0) {				for each(var LI:LoadingImageItem in _items) {					removeItemListeners(LI);					LI.destroy();					LI = null;				}			}			_items = null;		}			}	}