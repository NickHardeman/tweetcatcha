package com.tweetcatcha.visual {		import flash.display.MovieClip;		import flash.events.EventDispatcher;	import flash.events.Event;		import com.reintroducing.events.CustomEvent;	import com.tweetcatcha.data.Constants;		import com.caurina.transitions.*;		public class TimeCircleManager extends EventDispatcher {		// the holda clip inside the circle nav //		private var _mc			:MovieClip;		private var _tCircles	:Vector.<TimeCircle>;		// this is the min rad that it can be, most likely the rad of the center nav //		private var _minRadius	:Number;		private var _sw			:Number;		private var _sh			:Number;				private var _wInc		:Number;				public function setup():void {			_tCircles = new Vector.<TimeCircle>(24, true);						for (var i :int = 0; i < 24; i++) {				var tc:TimeCircle = new TimeCircle();								_mc.addChild(tc);				_tCircles[i] = tc;			}		}				public function onStageResize($w:Number, $h:Number):void {			trace("TimeCircleManager :: onStageResize : ");			_sw = $w;			_sh = $h;			if (_tCircles != null) configureCircles($w - _mc.x);		}				public function configureCircles($tarX:Number):void {			// tcm.mc.parent == dreamweaver_mc on the root timeline			_wInc = ( (_sw - $tarX) - (_minRadius) ) / 22;			//_posInc = _w /2; 			for (var i :int = 1; i <= 24; i++) {				var tc:TimeCircle = _tCircles[i-1];				tc.tarWidth = tc.tarHeight = (_wInc * 2) * i + (_minRadius * 2);				tc.alpha = 1;				tc.fill_mc.visible = false;				//tc.alpha = 1 - ((i / 25) + (1/25));				//tc.fill_mc.alpha = (1 - (i/24)) - .5;			}					}				public function animatePositionsIn():void {			//configureCircles();			for (var i :int = 1; i <= 24; i++) {				var tc:TimeCircle = _tCircles[i-1];				if (i == 24) {					Tweener.addTween(tc, {width:tc.tarWidth, height:tc.tarHeight, time:.5, transition:"easeOutSine", onComplete:_onAnimateInComplete});				} else {					Tweener.addTween(tc, {width:tc.tarWidth, height:tc.tarHeight, time:.5, transition:"easeOutSine"});				}			}		}		private function _onAnimateInComplete():void {			dispatchEvent(new Event(Constants.ANIMATE_IN_COMPLETE));		}				public function getRadiusForTime($hour:int, $min:int):Number {			return _wInc * $hour + (($min/60) * _wInc) + _minRadius;		}						public function set minRadius($r:Number):void {			_minRadius = $r;		}				public function set mc($mc:MovieClip):void {			_mc = $mc;		}	}	}