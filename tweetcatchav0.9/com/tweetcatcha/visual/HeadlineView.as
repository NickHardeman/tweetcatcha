package com.tweetcatcha.visual {		import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.data.DataProvider;	import fl.controls.DataGrid;    import flash.events.Event;		import flash.display.MovieClip;		import com.tweetcatcha.data.objects.NewsItem;	import com.tweetcatcha.data.Constants;	import com.tweetcatcha.data.objects.Tweet;		import com.reintroducing.events.CustomEvent;		import com.caurina.transitions.*;		import com.tweetcatcha.visual.IconCellRenderer;		public class HeadlineView extends MovieClip {				protected var _newsItems		:Vector.<NewsItem>;        private var dg:DataGrid;				public function HeadlineView() {			this.visible = false;			this.alpha = 0;			this.blankBtn.useHandCursor = false;			closeBtn.buttonMode = true;			closeBtn.addEventListener(MouseEvent.MOUSE_DOWN, _onCloseBtn);		}				public function set newsItems($n:Vector.<NewsItem>) {			_newsItems = $n;		}				public function setup():void {			createDataGrid();		}				private function createDataGrid():void {			if (dg) {this.removeChild(dg); dg = null;}			dg = new DataGrid();            dg.move(0, 20);            dg.width = 1000            dg.rowCount = 24;            dg.columns = ["Serial", "Time", "Headline", "Tweets"];			dg.editable = false;			dg.resizableColumns = false;			dg.getColumnAt(3).cellRenderer = IconCellRenderer;						for (var i:uint = 0; i < _newsItems.length; i++) {				//trace("--------------------------------------");				//trace("news item created time = " + _newsItems[i].ID);				//trace("news item created time = " + _newsItems[i].createdTime);				//trace("news item headline = " + _newsItems[i].headline);				//trace("news item total tweets = " + _newsItems[i].totalTweets);				var item:Object = {	Serial:_newsItems[i].ID,									Time:_newsItems[i].createdTime, 									Headline:_newsItems[i].headline,									Tweets:_newsItems[i].totalTweets									};				dg.addItem(item);			}			            dg.addEventListener(Event.CHANGE, gridItemSelected, false, 0, true);			//adjust column widths			dg.columns[0].width = 0;			dg.columns[1].width = 150;			dg.columns[2].width = 500;			dg.rowHeight = 50;			dg.setStyle("cellRenderer", GridCellRenderer);			dg.setStyle("headerRenderer", GridHeaderRenderer);            			addChild(dg);			        }		        public function gridItemSelected($e:Event):void {			trace("Selected item = " + $e.target.selectedItem.Serial);							dispatchEvent( new CustomEvent(Constants.HEADLINE_ID_SELECTED, {ID:$e.target.selectedItem.Serial}) );			closeHV();        }				//open and close headline view		public function openHV():void {			this.visible = true;			Tweener.addTween(this, {alpha:1, time:0.2, transition:"linear"});		}				public function closeHV():void {			Tweener.addTween(this, {alpha:0, time:0.2, transition:"linear", onComplete:clearAll});		}				public function clearAll():void {			this.visible = false;		}				//close button		public function _onCloseBtn(Event:MouseEvent):void {			closeHV();		}			}}